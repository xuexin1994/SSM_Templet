<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		xmlns:context="http://www.springframework.org/schema/context"
		xmlns:mvc="http://www.springframework.org/schema/mvc"
		xsi:schemaLocation="http://www.springframework.org/schema/beans 
							http://www.springframework.org/schema/beans/spring-beans.xsd
							http://www.springframework.org/schema/mvc 
							http://www.springframework.org/schema/mvc/spring-mvc.xsd
							http://www.springframework.org/schema/context 
							http://www.springframework.org/schema/context/spring-context.xsd">
	<!-- 配置包组件扫描 -->
	<context:component-scan base-package="com.xin.controller"/>
	
	<!-- 测试非注解形式开发 ,注意：id作为映射路径，该路径结尾的.action不能省略-->
	<bean id="/notAnnotation.action" class="com.xin.controller.NotAnnotationController"/>
	<!-- 配置推荐使用的处理器的映射器 -->
	<!-- <bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping"/> --> 
	<!-- 配置推荐使用的处理器的适配器-->
	<!-- <bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">
		<property name="webBindingInitializer" ref="webBinder"/>
		配置Jackson用于与页面的json数据交互
		<property name="messageConverters">
			<list>
				<bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter"/>
			</list>
		</property>
	</bean>  -->
	<!-- 自定义webBinder -->
	<!-- <bean id="webBinder" class="org.springframework.web.bind.support.ConfigurableWebBindingInitializer">
		<property name="conversionService" ref="conversionService"/>
	</bean>  -->
	
	<!-- 配置注解驱动 ，替代上面RequestMappingHandlerMapping,RequestMappingHandlerAdapter两个配置项 -->
	<mvc:annotation-driven conversion-service="conversionService"/>
	<!-- 格式转换器配置 -->
	<bean id="conversionService" class="org.springframework.format.support.FormattingConversionServiceFactoryBean">
		<property name="converters">
			<set>
				<bean class="com.xin.utils.DateConverter"/>
			</set>
		</property>
	</bean>
	
	<!-- 设置视图解析器 的参数-->
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<!-- 设置前缀 -->
		<property name="prefix" value="/WEB-INF/jsp/"></property>
		<!-- 设置后缀 -->
		<property name="suffix" value=".jsp"></property>
	</bean>
	
	<!-- 配置全局异常处理器 -->
	<bean class="com.xin.exception.GlobalException"/>
	<!-- 文件上传 -->
	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
	<!-- 设置上传文件的最大尺寸为5MB -->
		<property name="maxUploadSize" value="5242880"/>
		<property name="defaultEncoding" value="utf-8"/>
	</bean>
	
	
	<!-- 配置静态资源路径 :方式一
		这种方式配置不够灵活，只能将WebContent下的目录设置为静态资源
		如果Web应用服务器的默认Servlet名称不是"default"，则需要通过default-servlet-name属性显示指定-->
	<!-- <mvc:default-servlet-handler/> -->
	
	<!-- 配置静态资源路径 :方式二
		location为物理路径		"/js/" 表示js路径下的所有文件及子路径
		mapping为映射的虚拟路径	"/js/**"表示访问的路径为/js开头的路径都映射到物理路径下
		 如果访问 项目名/js/jquery-1.6.4.js 则会访问物理路径为 项目名/js/jquery-1.6.4.js
		 cache-period表示该资源的缓存时间。单位为秒，如果为0则不缓存
		 -->
	<mvc:resources location="/js/" mapping="/js/**" cache-period="300"/>

	
	<!-- 配置拦截器 -->
	<mvc:interceptors>
		<!-- 直接配置表示拦截所有路径 -->
		<bean class="com.xin.interceptor.TestInterceptor1" />
		<mvc:interceptor>
		<!-- 配置拦截路径，表示/**表示拦截所有请求 -->
			<mvc:mapping path="/**/intoInterceptor2.action"/>
			<bean class="com.xin.interceptor.TestInterceptor2"/>
		</mvc:interceptor>
	</mvc:interceptors>
</beans>